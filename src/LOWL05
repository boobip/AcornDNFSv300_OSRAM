 TTL Non maskable interupt routines.           File => LOWL05
 OPT NMILST

NMICDE    ; NMI code is stored here

; Main interupt handling

 ORG RAMCDE

; Main interupt handler
INT   ; NMI ints enter here program routed via rx/tx jump vector
 BIT INTOFF ; Disable NMI interupt
 PHA  ; Save acumulator
 TYA
 PHA  ; Save Y register
ROMSTR
 LDAIM ZERO ; !!!!!!!Self modifying code
 STA ROMSWW ; Change over to Econet ROM
TXJUMP
RXJUMP  ; !!!!!!Self modifying code n.b. must be in RAM
 JMP REC ; Jump to receive or transmit wait address


; Main routine that waits for tx interupt
; Returns from one int waits for another tx interupt
WRXINT  ; Saves rx jump address
WTXINT  ; Saves tx jump address
 STY TXJUMP + TWO ; Store jump label
WRXNTF ; The fast version only stores the LOW byte
WTXNTF
 STA TXJUMP + ONE
WRXIN2  ; Use same jump address as last time
WTXIN2  ; Use same jump address as last time
 LDA ROMSWR ; Read old sideways ROM
 STA ROMSWW ; Restore old sideways ROM
 PLA
 TAY  ; Restore Y register
 PLA  ; Restore accumulator
 BIT INTON ; Enable NMI
 RTI  ; Return to user process


CDELEN * . - INT

LOWEND * CDELEN + NMICDE

 TTL Paging error check code                   File => LOWL05

; Do the conditional assemblys here to check for
; paging errors generated in earlier files.


JMPIMH * :MSB: (RXPEEK - ONE) ; This is the one
 [ JMPIMH <> :MSB: (RXPOKE - ONE)
 PAGE ERROR RXPOKE
 ]
 [ JMPIMH <> :MSB: (RXRTN - ONE)
 PAGE ERROR RXRTN
 ]
 [ JMPIMH <> :MSB: (RXPROE - ONE)
 PAGE ERROR RXPROE
 ]
 [ JMPIMH <> :MSB: (RXPROH - ONE)
 PAGE ERROR RXPROH
 ]
 [ JMPIMH <> :MSB: (RXSTOP - ONE)
 PAGE ERROR RXSTOP
 ]
 [ JMPIMH <> :MSB: (RXSTRT - ONE)
 PAGE ERROR RXSTRT
 ]
 [ JMPIMH <> :MSB: (RXMACH - ONE)
 PAGE ERROR RXMACH
 ]



JMPI2H * :MSB: (RXRTN2 - ONE)
 [ JMPI2H <> :MSB: (RXPRE2 - ONE)
 PAGE ERROR RXPRE2
 ]
 [ JMPI2H <> :MSB: (RXPRH2 - ONE)
 PAGE ERROR RXPRH2
 ]
 [ JMPI2H <> :MSB: (RXSTP2 - ONE)
 PAGE ERROR RXSTP2
 ]
 [ JMPI2H <> :MSB: (RXSTR2 - ONE)
 PAGE ERROR RXSTR2
 ]



TXIMH * :MSB: (PEEKIT - ONE)
 [ TXIMH <> :MSB: (POKEIT - ONE)
 PAGE ERROR POKEIT
 ]
 [ TXIMH <> :MSB: (RTNIT - ONE)
 PAGE ERROR RTNIT
 ]
 [ TXIMH <> :MSB: (PROEIT - ONE)
 PAGE ERROR PROEIT
 ]
 [ TXIMH <> :MSB: (PROHIT - ONE)
 PAGE ERROR PROHIT
 ]
 [ TXIMH <> :MSB: (STOPIT - ONE)
 PAGE ERROR STOPIT
 ]
 [ TXIMH <> :MSB: (STRTIT - ONE)
 PAGE ERROR STRTIT
 ]
 [ TXIMH <> :MSB: (MACHIT - ONE)
 PAGE ERROR MACHIT
 ]

; ********

 [ :MSB: RXDEHI <> :MSB: REC
 [ FAST1 = TRUE
 PAGE ERROR :MSB: RXDEHI <> :MSB: REC ; FAST1 => FALSE
 ]
 |
 [ FAST1 <> TRUE
 PAGE OK :MSB: RXDEHI = :MSB: REC ; FAST1 => TRUE
 ]
 ]

; ********

 [ :MSB: RXHEAD <> :MSB: RXDEHI
 [ FAST2 = TRUE
 PAGE ERROR :MSB: RXHEAD <> :MSB: RXDEHI ; FAST2 => FALSE
 ]
 |
 [ FAST2 <> TRUE
 PAGE OK :MSB: RXHEAD = :MSB: RXDEHI ; FAST2 => TRUE
 ]
 ]

; ********

 [ :MSB: RXDAST <> :MSB: NOACK
 [ FAST3 = TRUE
 PAGE ERROR :MSB: RXDAST <> :MSB: NOACK ; FAST3 => FALSE
 ]
 |
 [ FAST3 <> TRUE
 PAGE OK :MSB: RXDAST = :MSB: NOACK ; FAST3 => TRUE
 ]
 ]

; ********

 [ :MSB: WSOUR <> :MSB: RXDAST
 [ FAST4 = TRUE
 PAGE ERROR :MSB: WSOUR <> :MSB: RXDAST ; FAST4 => FALSE
 ]
 |
 [ FAST4 <> TRUE
 PAGE OK :MSB: WSOUR = :MSB: RXDAST ; FAST4 => TRUE
 ]
 ]

; ********

 [ :MSB: ENPAK <> :MSB: WCLM
 [ FAST5 = TRUE
 PAGE ERROR :MSB: ENPAK <> :MSB: WCLM ; FAST5 => FALSE
 ]
 |
 [ FAST5 <> TRUE
 PAGE OK :MSB: ENPAK = :MSB: WCLM ; FAST5 => TRUE
 ]
 ]

; ********

 [ :MSB: WSCACK <> :MSB: ENPAK
 [ FAST6 = TRUE
 PAGE ERROR :MSB: WSCACK <> :MSB: ENPAK ; FAST6 => FALSE
 ]
 |
 [ FAST6 <> TRUE
 PAGE OK :MSB: WSCACK = :MSB: ENPAK ; FAST6 => TRUE
 ]
 ]

; ********

 [ :MSB: WSCAKS <> :MSB: WSCACK
 [ FAST7 = TRUE
 PAGE ERROR :MSB: WSCAKS <> :MSB: WSCACK ; FAST7 => FALSE
 ]
 |
 [ FAST7 <> TRUE
 PAGE OK :MSB: WSCAKS = :MSB: WSCACK ; FAST7 => TRUE
 ]
 ]

; ********

 [ :MSB: WSCAKD <> :MSB: WSCAKS
 [ FAST8 = TRUE
 PAGE ERROR :MSB: WSCAKD <> :MSB: WSCAKS ; FAST8 => FALSE
 ]
 |
 [ FAST8 <> TRUE
 PAGE OK :MSB: WSCAKD = :MSB: WSCAKS ; FAST8 => TRUE
 ]
 ]

; ********

 [ FAST9 = TRUE
 [ :MSB: NOUPDA <> :MSB: TXINFO  
 PAGE ERROR :MSB: NOUPDA <> :MSB: TXINFO ; FAST9 => FALSE
 ]
 [ :MSB: NOUPDA <> :MSB: TXINF2
 PAGE ERROR :MSB: NOUPDA <> :MSB: TXINF2 ; FAST9 => FALSE
 ]
 |
 [ :MSB: NOUPDA = :MSB: TXINF2
 [ :MSB: NOUPDA = :MSB: TXINFO  
 PAGE OK :MSB: NOUPDA = :MSB: TXINFO ; FAST9 => TRUE
 PAGE OK :MSB: NOUPDA = :MSB: TXINF2 ; FAST9 => TRUE
 ]
 ]
 ]

; ********

 [ :MSB: DATACK <> :MSB: ENPAK
 [ FAST10 = TRUE
 PAGE ERROR :MSB: DATACK <> :MSB: ENPAK ; FAST10 => FALSE
 ]
 |
 [ FAST10 <> TRUE
 PAGE OK :MSB: DATACK = :MSB: ENPAK ; FAST10 => TRUE
 ]
 ]

; ********

 [ :MSB: WDAAKS <> :MSB: DATACK
 [ FAST11 = TRUE
 PAGE ERROR :MSB: WDAAKS <> :MSB: DATACK ; FAST11 => FALSE
 ]
 |
 [ FAST11 <> TRUE
 PAGE OK :MSB: WDAAKS = :MSB: DATACK ; FAST11 => TRUE
 ]
 ]

; ********

 [ :MSB: WDAAKD <> :MSB: WDAAKS
 [ FAST12 = TRUE
 PAGE ERROR :MSB: WDAAKD <> :MSB: WDAAKS ; FAST12 => FALSE
 ]
 |
 [ FAST12 <> TRUE
 PAGE OK :MSB: WDAAKD = :MSB: WDAAKS ; FAST12 => TRUE
 ]
 ]

 TTL ROM statistics                            File => LOWL05
 OPT STATSL

; Calculate some ROM stats

NFSLEN * NFSEND - NFSORG ; The length of the NFS
TUBLEN * TUBEND - TUBORG ; The length of the TUBE code
LOWLEN * LOWEND - LOWORG ; The length of the low level code

ZZZZZZ * NFSLEN + TUBLEN + LOWLEN ; The total size
ROMORG * NFSORG ; For saving on to disc
ROMEND * NFSORG + &4000

 END
