
; > NFS01
 TTL Sideways ROM service routines
 OPT ROMP
;(C) 1981 ACORN Computers Limited

FALSE * &FFFF

; OS routine indirections
FSCVEC * &021E

rFILID * &1B


; ROM routine addresses
ROMNMI * &FF00
ROMBRK * ROMNMI+&3
ROMIRA * ROMBRK+&3
ROMIRB * ROMIRA+&3
ROMCOM * ROMIRB+&3
ROMBYT * ROMCOM+&3
ROMWRD * ROMBYT+&3
ROMWRC * ROMWRD+&3
ROMRDC * ROMWRC+&3
ROMFIL * ROMRDC+&3
ROMARG * ROMFIL+&3
ROMBGT * ROMARG+&3
ROMBPT * ROMBGT+&3
ROMGPB * ROMBPT+&3
ROMFND * ROMGPB+&3
ROMFSC * ROMFND+&3
ROMEVT * ROMFSC+&3
ROMVDU * ROMEVT+&3
ROMUPT * ROMVDU+&3

; OSBYTE codes
FXSCAN * &7A ;scan keyboard
FXSPEX * &77 ;close SPOOL and EXEC files
FXROMI * &A8 ;ROM 3-byte indirection origins
FXOKEY * &78 ;set OKEY
FXRSET * &FD ;reset type

; MOS variables
LINE * &00F2
ROMID * &00F4
ROMPTR * &00F6

dA * FALSE
START * &00A0
ADDRL * START +&02
ADDRH * ADDRL +&01
TIMOUT * ADDRH +&01
END * TIMOUT +&05

TUBE
RTUBE * &0400 ;other org
WRAM * &0128
SRAM * &0700
ZRAM * &0000
QRAM * ZRAM +&12 ;** 21/9/83 **
CLAIMT * QRAM +&02
CLAIMER * CLAIMT +&01
ZPTUBE * CLAIMER +&01
REPTR * &00FD
ESCFLG * &00FF
BRKVEC * &0202
WRCVEC * &020E
RDCVEC * &0210
EVTVEC * &0220
R1STAT * &FEE0
R1DATA * R1STAT +&01
R2STAT * R1DATA +&01
R2DATA * R2STAT +&01
R3STAT * R2DATA +&01
R3DATA * R3STAT +&01
R4STAT * R3DATA +&01
R4DATA * R4STAT +&01
OSFIND * &FFCE
OSGBPB * OSFIND +&03
OSBPUT * OSGBPB +&03
OSBGET * OSBPUT +&03
OSARGX * OSBGET +&03
OSFILE * OSARGX +&03

; paged ROM origin
ORG JMP RPROC ;Remote proc jump
 JMP THERE ;OS service routine
 = &82 ;type byte (service ROM)
 = COPYR ;offset pointer to copyright message
NAMES  ;names to match on
BIN = &83 ;Binary version number
DISK = "DFS,"
NET = "NET"
COPYR
 = ZERO ;terminator
 = "(C)"
ROFFL = "ROFF"

ERRTAB
 = NLIST1 - MESTAB
 = NLIST2 - MESTAB
 = NLIST3 - MESTAB
 = NLIST4 - MESTAB
 = NLIST5 - MESTAB
 = NLIST6 - MESTAB
 = NLIST7 - MESTAB
 = NLIST8 - MESTAB
 = NRMSG - MESTAB

MCPEEK   ;this area is peeked to determine the M/c info
 = &01 ;BBCpu
 = &00 ;Acorn M/c
 = &60 ;=> kosher version (using reg. 4)
 = &03 ;issue number

CASELO

SVLO  ;lo-byte of service routine address
 = RTTS -&01 ;no-operation
 = STATIC -&01 ;offer static workspace
 = DYNAM -&01 ;offer dynamic workspace
 = BOOT -&01 ;offer bootstrap
 = NAME -&01 ;offer command name
 = BRIANI -&01 ;unknown interrupt
 = RTTS -&01 ;BRK
 = FSBYTE -&01 ;OSBYTE call
 = FSWORD -&01 ;OSWORD call
 = HELP -&01 ;*HELP command
 = RTTS - &01 ;Claim for static workspace
 = BRIANQ - &01 ;Relinquish NMI, restore old user
 = BRIANC - &01 ;call to claim NMI
 = NAME1 - &1 ;restart filing system

PRLO = CHARIN -&01 ;put chars into buffer
 = REMOT - &01 ;initialise REMOTE
 = CVIEW - &01 ;grab screen parameters
 = RESET - &01 ;restart language
 = RCHAR - &01 ;char from REMOTE

FTABLO
 = OPTION -&01 ;(0)
 = EOFR -&01    ;(1) end-of-file
 = CMNDR -&01 ;(2)
 = DECODE -&01 ;(3) unrecognised command line
 = CMNDR -&01 ;(4) *RUN command
 = CAT -&01    ;(5) catalogue request
 = FSDIE - &01 ;(6) New filing system
 = HANDLE - &01;(7) bounds on handles

CTABLO = INFO -&01
 = LOGIN -&01
 = SDISC -&01
 = SDIR -&01
 = CMND -&01  ;entry for load as command
 = SLIB -&01

TABLO = TXPOLL -&01
 = RXPOLL -&01
 = DELCB -&01
 = ROFFF - &01

CASEHI

SVHI  ;hi-byte of service routine address
 = /(RTTS -&01 )
 = /(STATIC -&01 )
 = /(DYNAM -&01 )
 = /(BOOT -&01 )
 = /(NAME -&01 )
 = /(BRIANI -&01 )
 = /(RTTS -&01 )
 = /(FSBYTE -&01 )
 = /(FSWORD -&01 )
 = /(HELP -&01 )
 = /(RTTS - &01 )
 = /(BRIANQ - &01 )
 = /(BRIANC - &01 )
 = /(NAME1 - &01 )

PRHI = /(CHARIN -&01 )
 = /(REMOT -&01 )
 = /(CVIEW - &01 )
 = /(RESET - &01 )
 = /(RCHAR - &01 )

FTABHI
 = /(OPTION -&01 ) ;(0)
 = /(EOFR -&01 )    ;(1)
 = /(CMNDR -&01 ) ;(2)
 = /(DECODE -&01 ) ;(3)
 = /(CMNDR -&01 ) ;(4)
 = /(CAT -&01 )    ;(5)
 = /(FSDIE - &01 ) ;(6)
 = /(HANDLE - &01 );(7)

CTABHI = /(INFO -&01 )
 = /(LOGIN -&01 )
 = /(SDISC -&01 )
 = /(SDIR -&01 )
 = /(CMND -&01 )  ;entry for load as command
 = /(SLIB -&01 )

TABHI = /(TXPOLL -&01 )
 = /(RXPOLL -&01 )
 = /(DELCB -&01 )
 = /(ROFFF -&01 )

PRTBLN * FTABLO - PRLO ;set table length
FSBYTE  ;call here on BYTE
;Y holds the call number
; Table of calls
; 50 = Poll Txcb
; 51 = Poll Rxcb
; 52 = Delete Rxcb
; 53 = Break Remote link

 LDA PARMA ;old value
 SBCIM  49 ;check bounds
; BMI RTTS
 CMPIM &04
 BCS RPROC1
 TAX

 LDAIM  0
 STA ROMA ;claim call

 TYA ;save Y
 LDYIM TABLO - CASELO
 BNE JMI ;do JMI

READIN INY
LOGON    ;called from DECODE as the FS number may
;be embedded in the command line and should be extracted
;and stored in FSLOCN.

 LDAIY TEMPX
 CMPIM SPACE
 BEQ READIN
 CMPIM "9"+ 1 ;returns C=1 if no number
 BCS PWFL1
 JSR DECIN
 BCC READEX ;found a '.'

 STA FSLOCN + 1 ;network number
 INY
 JSR DECIN

READEX BEQ PWFL1
 STA FSLOCN ;so set up new FS id

PWFL1 JSR CATLP
PWFLA DEY
 BEQ PWFLB
 LDAAY TXBUF
 CMPIM ":"
 BNE PWFLA

 JSR OSWRCH ;prompt for password
PWFL3 JSR ESC ;detect escape here
 JSR OSRDCH ;read password
 STAAY TXBUF ;fill it into the buffer
 INY
 INX
 CMPIM CR ;'til end of line
 BNE PWFL3
 JSR OSNEWL
 BNE PWFLA

COMERR    ;passes the command line to FS with Fn=0
;to get a FS decoding of it. The command code returned shows
;what action, if any, should be taken by the user.

 JSR CATLP ;copy the command line across
 TAY ;indicates command line decoding
PWFLB JSR DOFSOP
 LDX RXCC ;get command code
 BEQ RTTS ;skip if RC=0
 LDA RXBUF
 LDYIM CTABLO - CASELO -&04 ;get offset
 BNE JMI

FSOP
 JSR PUTREG ;save registers
 CMPIM &08 ;look for table extent
 BCS RTTS ;exit, no regs corrupt

 TAX ;index the table
 TYA ;save A
 LDYIM FTABLO - CASELO
 BNE JMI

RPROC CPXIM PRTBLN ;come here on Remote Proc jump
RPROC1 BCS RTTS ;skip if no good
 LDYIM PRLO - CASELO
JMI INX
 DEY
 BPL JMI ;get correct offset
 TAY ;restore Y
 LDAAX CASEHI -&01
 PHA
 LDAAX CASELO -&01
 PHA
 LDX TEMPX
RTTS RTS
NSV * &0D ;number of entries in SV table
SERVICE  ;entered by MOS for service request
; A = service code
; X = ROM id
; Y = argument (service dependent)

THERE BIT &28F
 PHP
 BPL THERE7
 JSR DISC

THERE7 PHA
 CMPIM  1 ;do this every RESET pass 1
 BNE FRUGA

 LDA &FEA0 ;status register 0
 ANDIM &ED
 BNE FRUGC

 LDA &FEA1 ;status register 1
 ANDIM &DB
 BEQ FRUGA

FRUGC ROLAX &DF0
 SEC
 RORAX &DF0 ;frugal the net here

FRUGA LDAAX &DF0
 ASLA
 PLA ;restore Acc

 BMI THERE1 ;allow tube to function
 BCS SERVC3 ; ROM off here

; Double jump here, so dont change condition

THERE1 CMPIM &FE
 BCC XXXL1
 BNE TGO ;A=$FF here
 CPYIM &00 ;A=$FE here
 BEQ XXXL1 ;Skip here
 LDXIM &06
 LDAIM &14
 JSR OSBYTE
TMESSA BIT R1STAT
 BPL TMESSA
 LDA R1DATA
 BEQ TOUT
 JSR OSWRCH
 JMP TMESSA

TGO LDAIM EVENT
 STA EVTVEC
 LDAIM /(EVENT )
 STA EVTVEC +&01
 LDAIM NEWBR
 STA BRKVEC
 LDAIM /(NEWBR )
 STA BRKVEC +&01
 LDAIM &8E
 STA R1STAT

 LDYIM  0
CLOOP LDAAY ORG52 ;code ORG'd at $400
 STAAY &0400
 LDAAY ORG53 ;code ORG'd at $500
 STAAY &0500
 LDAAY ORG53 +&FF+&01 ;one page on
 STAAY &0600
 DEY
 BNE CLOOP
 JSR ADRRAL ;release all claims
 LDXIM &60
FLOOP LDAAX ZCODE
 STAAX ZPTUBE
 DEX
 BPL FLOOP

TOUT LDAIM &00

XXXL1 CMPIM &12
 BNE SERVC1 ;explicit test for $12
 CPYIM &05
 BNE SERVC1 ;restart only if Y=5
 LDAIM NSV
 BNE SERVC2 ;** 9/8/83 **

SERVC1 CMPIM NSV
SERVC3 BCS RTS ;[unrecognised service code]
SERVC2 TAX
 LDA ROMA
 PHA
 LDA ROMY
 PHA ;save work area

 STX ROMA ;save service code
 STY ROMY

; jump to appropriate service routine
 TYA ;save Y
 LDYIM SVLO - CASELO
 JSR JMI
 LDX ROMA ;restore service code / zero

 PLA
 STA ROMY
 PLA
 STA ROMA
 TXA
 LDX ROMID ;restore X as ROM number

RTS
 PLP
 BMI TABVC3
 JMP DISC


NAME  ;command name to decode
; LINE(ROMY) -> command name
 LDXIM ROFFL - NAMES
 JSR MATCH ;returns A=0, Z=1 on match
 BNE NAME2

ROFFF
NROFF
;code executed when +++
;*ROFF or Break-link command issued
;The System masks are reset and control
;passes to the MOS.

 LDYIM STAT2
 LDAIY PAGE1
 BEQ NROFFX ;not done so end
 LDAIM &00
 TAX
 STAIY PAGE1
 TAY
 LDAIM &C9
 JSR OSBYTE ;enable KB
 LDAIM ROFF
 JSR NTX
  ;to set masks to zero
REMOL0 STX WORKP1
 LDAIM &CE
REMOL1 LDX WORKP1
 LDYIM &7F ;keep lo 6 bits
 JSR OSBYTE ;intercept calls
 ADCIM &01 ;carry set so add (net) 2
 CMPIM &D0
 BEQ REMOL1
NROFFX LDAIM &00
 STA ROMA ;claim call
 STA WORKP1 ;restore the pointer
TABVC3 RTS
NAME2 LDXIM NET -NAMES
 JSR MATCH
 BNE BADRTS

NAME1 JSR JM16 ;kill previous filing system
 SEC
 ROR ROMY ;kill AUTO-BOOT here
 JSR AUTOFS ;claim the work-space and vectors
 LDYIM SAVEHI +&08 ;restore saved area after *NET only

INITL LDAIY PAGE1
 STAAY FSLOCN - SAVEHI
 DEY
 CPYIM SAVEHI -&01
 BNE INITL
 BEQ INIT

HELP JSR VSTRNG
 = CR,"NFS 3.60"
 = CR ;Terminate HELP message

BOOT0
BADRTS
 LDY ROMY
 RTS

JM16 LDAIM SIX
JM1 JMI &021E ;call to OSFUNC

BOOT  ;bootstrap offered
; scan keyboard
 JSR JM16 ;call to claim vectors
 LDAIM FXSCAN
 JSR OSBYTE ;X := matrix address of pressed key ($FF=no key pressed)
 TXA
 BMI AUTO ;[auto boot, no key pressed]
; key pressed - matrix address in A & X
 EORIM &55 ;'n'
 BNE BOOT0 ;[not 'n' key]
 TAY ;Y=0 here
 LDAIM FXOKEY
 JSR OSBYTE ;forget key
AUTO  ;identify filing system
 JSR VSTRNG
 = "Econet Station "
 LDYIM SAVEHI - 1
 LDAIY PAGE1 ;output the station number
 JSR DECOUT
 LDAIM &20 ;look for data carrier detect
 BIT &FEA1 ;SR2
 BEQ INITCR
 JSR VSTRNG
 = " No Clock"
 NOP ;negative byte
INITCR JSR VSTRNG
 = CR,CR
INIT
; alter normal OS indirections
 LDYIM FSCVEC-FILVEC+&1
INIT1
 LDAAY VECTAB
 STAAY FILVEC
 DEY
 BPL INIT1
; alter ROM indirections
; ROMPTR -> ROM indirection 3-byte tuples
 JSR DYNVEC ;intercept the NET vector
 LDYIM rFILID
 LDXIM &07
 JSR INIT4 ;code in DYNVEC
 STX ROMA ;claim call

AUTOFS LDAIM &8F
 LDXIM &0F
 JSR OSBYTE ;vectors claimed
 LDXIM &0A
 JSR OSBYTE ;claim FS workspace
 LDX ROMY ;detect BOOT option
 BNE STATEX
 LDXIM BOOTUP
 LDYIM /(BOOTUP )
 JMP DECODE ;call with "I AM ... BOOT"

BOOTUP = "I .BOOT",CR

VECTAB
 = ROMFIL
 = /(ROMFIL )
 = ROMARG
 = /(ROMARG )
 = ROMBGT
 = /(ROMBGT )
 = ROMBPT
 = /(ROMBPT )
 = ROMGPB
 = /(ROMGPB )
 = ROMFND
 = /(ROMFND )
 = ROMFSC
 = /(ROMFSC )

ECOTAB
 = FILEOP
 = /(FILEOP )
 = "J" ;osfile

 = OSARGS
 = /(OSARGS )
 = "D" ;osargs

 = GETBYT
 = /(GETBYT )
 = "W" ;osbget

 = PUTBYT
 = /(PUTBYT )
 = "B" ;osbput

 = OSBGPB
 = /(OSBGPB )
 = "A" ;osbgpb

 = FINDOP
 = /(FINDOP )
 = "R" ;osfind

 = FSOP
 = /(FSOP )
; = ZERO ;fsfunc

STATIC
 CPYIM &10 ;this fits into the space in ECOTAB
 BCS STATEX
 LDYIM &10
STATEX RTS

 = ENTRY ;NETVEC interception
 = /(ENTRY )

DYNAM STY &9D ;first page static area
 INY ;claim one page
 STY &9F ;second page
 LDAIM &00
 LDYIM STAT2
 STAIY PAGE1 ;clean status byte
 LDYIM FILLER
 STA &9C
 STA &9E ;set up pointers
 STA ROMY
 STA TXCLR ;reset TX sema 
 TAX
 LDAIM FXRSET ;check type of reset
 JSR OSBYTE
 TXA ;A=0 then BREAK, A=1 then POWER-UP, A=2 then CTRL-BREAK
 BEQ NETON

 LDYIM SAVEHI ;stow this in Dynamic space too
 LDAIM FS
 STA FSLOCN ;default station
 STAIY PAGE1 ;save in private workarea
 LDAIM  0
 STA FSLOCN + 1
 STA LSTAT ;initial status copied for Low level
 STA MESS ;turn messages OFF
 STA OPT ;initialise this (for small FS)
 INY
 STAIY PAGE1 ;save in private work area
 LDYIM  3
 STAIY WORKP1
 DEY
 LDAIM PS
 STAIY WORKP1 ;set default printer server

DNAML1 LDA ROMY ;null flag byte
 JSR OFFSET
 BCS NETON
 LDAIM &3F
 STAIY WORKP1 ;set up CB's
 INC ROMY
 BNE DNAML1
NETON LDA &FE18 ;read station Id
 LDYIM SAVEHI - 1
 STAIY PAGE1 ;save station id
 JSR BRIANP ;call lowlevel software to initialise
 LDAIM &40 ;enable user lowlevel Rx
 STA LFLAG

DYNVEC LDAIM FXROMI ;*********
 LDXIM &00 ;note new osbyte call
 LDYIM FILLER
 JSR OSBYTE
; XY -> ROM indirection 3-byte tuples
 STX ROMPTR+&00
 STY ROMPTR+&01

 LDYIM &36
 STY &0224
 LDXIM ONE
INIT4
 LDAAY ECOTAB - rFILID
 STAIY ROMPTR
 INY
 LDAAY ECOTAB - rFILID
 STAIY ROMPTR
 INY
 LDA ROMID
 STAIY ROMPTR
 INY
 DEX
 BNE INIT4

 LDY WORKP1 +&01
 INY ;return the updated pointer
 RTS

FSDIE  ;called through here when a new filing
;system is started up, to relinquish the FS workarea.
 LDYIM SAVEHI +&08
FSDIEL LDAAY FSLOCN - SAVEHI
 STAIY PAGE1 ;into dynamic area
 DEY
 CPYIM SAVEHI -&01
 BNE FSDIEL ;save context
 LDAIM FXSPEX
 JMP OSBYTE ;close SPOOL and EXEC files

MATCH  ;try to match on command name
; NAMES(X) -> name
; LINE(ROMY) -> command name
 LDY ROMY
MATCH1
 LDAIY LINE

 CMPIM "." ;** 22/8/83 **
 BEQ SKPSPI

 ANDIM &DF ;force to upper case
 BEQ MATCH2 ;[SPACE detected]
 CMPAX NAMES
 BNE MATCH2 ;[mismatch]
 INY
 INX
 BNE MATCH1 ;[ALWAYS jump, end of internal name]
; NEVER fall thru

MATCH2  ;check for end of internal name
 LDAAX NAMES
 BEQ SKPSP ;[matched on full name,
; skip spaces and return result in Z flag]
; not a match on full name
 RTS

SKPSPI
 INY
SKPSP
 LDAIY LINE
 CMPIM SPACE
 BEQ SKPSPI
 EORIM CR ;return Z=1, A=0 if match
 RTS

 LNK NFS02

